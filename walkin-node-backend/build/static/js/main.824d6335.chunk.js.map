{"version":3,"sources":["components/GetToday.js","components/Loading.js","components/Sort.js","components/SearchByDate.js","components/SearchByEvent.js","components/SearchByTag.js","components/SelectedTags.js","components/Show.js","actions/tagActions.js","components/ShowTagOptions.js","components/MapView.js","components/Slider.js","components/Filter.js","components/Fetch.js","components/ListView.js","actions/locationActions.js","components/NavBar.js","components/EventCard.js","components/ListScreen.js","tests/TestScreen.js","components/MainView.js","App.js","serviceWorker.js","reducers.js","components/GetTagList.js","index.js"],"names":["GetToday","date","Date","setDate","getDate","toISOString","substr","Loading","props","React","useState","times","setTimes","load","loading","loaded","setTimeout","Sorting","filtered","changeArrays","x","y","temp","i","length","event_dates","starting_day","SearchByDate","events","selectedDay","undefined","map","event","moment","format","startTime","endTime","ending_day","timeNow","getTime","diffStar","diffEnd","push","Sort","SearchByEvent","letEvents","name","fi","en","sv","toLowerCase","includes","SearchByTag","selectedTags","tagArray","selected","console","log","SelectedTags","forEach","element","value","Array","isArray","tags","some","tag","includesTag","ShowAll","endingday","lon","location","lat","key","width","address","street_address","postal_code","locality","toFixed","className","addTag","newTag","type","setTags","ShowTagOptions","store","useStore","connect","animatedComponents","makeAnimated","options","getState","allTags","closeMenuOnSelect","components","isMulti","onChange","arrayOfSelectedTags","dispatch","chosenTags","MapView","zoom","latitude","lng","longitude","iconMarkup","renderToStaticMarkup","style","color","customMarkerIcon","divIcon","html","filteredEvents","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","Map","center","TileLayer","url","attribution","position","Popup","minWidth","Card","Body","Row","paddingBottom","Col","xs","md","Title","Text","description","intro","latLng","distanceTo","Button","variant","marginRight","href","info_url","target","Circle","radius","area","Slider","min","max","size","changeEvent","HandleSlider","Filtteri","happening","text","day","setDay","setEvent","setArea","open","setOpen","handleClose","ShowFilters","margin","onClick","Modal","show","onClose","Header","id","placeholder","e","Footer","ToDay","document","getElementById","Fetching","lati","long","a","fetch","then","response","ok","json","Error","data","JSON","parse","catch","error","ListView","setEvents","setSelectedDay","setLoading","setLoaded","setLat","setLon","fetchData","Fetch","useEffect","Coords","navigator","geolocation","getCurrentPosition","coords","setUserLocation","toDay","dayNew","eventNew","areaNew","parseInt","NavBar","Navbar","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Nav","EventCard","cardMockEvents","mockEvents","dateAndTime","place","distance","marginTop","ListScreen","Container","TestScreen","MainView","Tabs","defaultActiveKey","Tab","eventKey","title","App","Boolean","window","hostname","match","initialState","range","label","allEvents","userLocation","selectedTime","selectedFilters","timeFilter","tagFilter","locationFilter","rootReducer","state","action","Object","assign","newTags","filter","time","createStore","firstReducer","ReactDOM","render","serviceWorker","ready","registration","unregister","message"],"mappings":"0PAAe,SAASA,IAGpB,IAAIC,EAAO,IAAIC,KAOf,OANAD,EAAKE,QAAQF,EAAKG,UAAY,GAChBH,EAAKI,cAAcC,OAAO,EAAG,ICFhC,SAASC,EAAQC,GAAO,MAGTC,IAAMC,SAAS,GAHN,mBAG5BC,EAH4B,KAGrBC,EAHqB,KAM/BC,EAAOL,EAAMM,QAYjB,MATa,YAATD,GAAuBL,EAAMO,QAC7BC,YAAW,WACPJ,EAASD,EAAQ,KAEf,KAKNA,EAAQ,GAEJ,6BACKE,GAKL,yD,qBC5BG,SAASI,EAAQC,GAS5B,IANA,IAAMC,EAAe,SAACD,EAAUE,EAAGC,GAC/B,IAAIC,EAAOJ,EAASE,GACpBF,EAASE,GAAKF,EAASG,GACvBH,EAASG,GAAKC,GAGTC,EAAI,EAAGA,EAAIL,EAASM,OAAS,EAAGD,IACrC,IAAK,IAAIH,EAAI,EAAGA,EAAIF,EAASM,OAASD,EAAI,EAAGH,IACrCF,EAASE,GAAGK,YAAYC,aAAeR,EAASE,EAAI,GAAGK,YAAYC,cACnEP,EAAaD,EAAUE,EAAGA,EAAI,GAK1C,OAAOF,ECfI,SAASS,EAAaC,EAAQC,GAM3C,IAAIX,EAAW,GACf,OAAoB,IAAhBW,QAAgCC,IAAXF,GAGvBA,EAAOG,KAAI,SAACC,GAGV,GAAIC,IAAOD,EAAMP,YAAYC,cAAcQ,OAAO,gBAAkBD,IAAOJ,GAAaK,OAAO,cAAe,CAE5G,IAAIjC,EAAO,IAAIC,KAKf,GAJAD,EAAKE,QAAQF,EAAKG,UAAY,GAChBH,EAAKI,cAAcC,OAAO,EAAG,MAG3BuB,EAAa,CAE3B,IAAIM,EAAY,IAAIjC,KAAK8B,EAAMP,YAAYC,cACvCU,EAAU,IAAIlC,KAAK8B,EAAMP,YAAYY,YAErCC,GADU,IAAIpC,MACIqC,UAClBC,EAAW,IAAItC,KAEnBsC,GADAA,EAAWL,EAAYG,GACD,IAAO,GAAK,GAElC,IAAIG,EAAU,IAAIvC,KAElBuC,GADAA,EAAUL,EAAUE,GACA,IAAO,GAAK,IAE5BE,EAAW,GAAKA,EAAW,GAAKA,EAAW,GAAKC,EAAU,IAC5DvB,EAASwB,KAAKV,QAGhBd,EAASwB,KAAKV,OAMpBd,EAAWyB,EAAKzB,IAMXU,ECnDM,SAASgB,EAAchB,EAAQI,GAK5C,IAAIa,EAAYjB,EAEZV,EAAW,GACf,OAAc,IAAVc,GAGFa,EAAYjB,EAAOG,KAAI,SAACH,EAAQL,GAE9B,IAAIuB,EAAOlB,EAAOkB,KAAKC,GAEV,OAATD,IACFA,EAAOlB,EAAOkB,KAAKE,IAGR,OAATF,IACFA,EAAOlB,EAAOkB,KAAKG,IAIrBH,EAAOA,EAAKI,cACZlB,EAAQA,EAAMkB,eAEe,IAAzBJ,EAAKK,SAASnB,IAChBd,EAASwB,KAAKd,MAKlBV,EAAWyB,EAAKzB,IAIX2B,EChCM,SAASO,EAAYxB,GAIhC,IAAIV,EAAW,GACXmC,ECLO,SAAsBC,GACjC,IACIC,EAAW,GACf,QAAsBzB,IAFFwB,EAIhB,OAAOC,EAEPA,EAAWD,EAEXE,QAAQC,IAAIF,GDJGG,GASnB,GAJAL,EAAaM,SAAQ,SAAAC,GAAO,OAAIJ,QAAQC,IAAIG,MAC5CP,EAAaM,SAAQ,SAAAC,GAAO,OAAIJ,QAAQC,IAAIG,EAAQC,UAGhDC,MAAMC,QAAQV,IAAyC,IAAxBA,EAAa7B,OAC5C,OAAOI,EA2BX,OAvBAA,EAAO+B,SAAQ,SAAA3B,IAOf,SAAqBA,GACjB,IAAImB,GAAW,EACXnB,EAAMgC,KAAKC,MAAK,SAAAC,GAChB,OAAOb,EAAaF,SAASe,EAAIpB,WAEjCK,GAAW,GAEf,OAAOA,GAbHgB,CAAYnC,IACZd,EAASwB,KAAKV,MAqBfd,EE3CI,SAASkD,EAAQ5D,GAG9B,IAAIoB,EAASpB,EAAMoB,OAMnBA,EAASgB,EADAjB,EAAanB,EAAMoB,OAAQpB,EAAMqB,aACXrB,EAAMwB,OAIjB,IAAhBxB,EAAMwB,OAAqC,IAAtBxB,EAAMqB,cAC7BD,EAASpB,EAAMwB,OAOjB,IAAIa,EAwCJ,OAvCAA,GAJAjB,EAASwB,EAAYxB,IAIFG,KAAI,SAACH,EAAQL,GAE9B,IAAIuB,EAAOlB,EAAOkB,KAAKC,GACnBsB,EAAYzC,EAAOH,YAAYY,WAC/BiC,EAAM1C,EAAO2C,SAASD,IACtBE,EAAM5C,EAAO2C,SAASC,IAEb,OAAT1B,IACFA,EAAOlB,EAAOkB,KAAKE,IAER,OAATF,IACFA,EAAOlB,EAAOkB,KAAKG,IAGrB,IAAId,EAAY,IAAIjC,KAAK0B,EAAOH,YAAYC,cAC5CS,EAAaF,IAAOE,GAAWD,OAAO,SACtC,IAAIE,EAAU,IAAIlC,KAAKmE,GAIvB,OAHAjC,EAAWH,IAAOG,GAASF,OAAO,SAIhC,wBAAIuC,IAAKlD,GACP,4BAAKA,GACL,6BACA,wBAAImD,MAAO,KAAM5B,GACjB,4BAAKlB,EAAO2C,SAASI,QAAQC,eAA7B,KACA,4BAAKhD,EAAO2C,SAASI,QAAQE,YAA7B,KACA,4BAAKjD,EAAO2C,SAASI,QAAQG,SAA7B,KACA,4BAAK7C,IAAOL,EAAOH,YAAYC,cAAcQ,OAAO,cAApD,IAAoEC,GACpE,iCACA,4BAAKF,IAAOoC,GAAWnC,OAAO,cAA9B,IAA8CE,EAA9C,KACA,iCACA,4BAAKkC,EAAIS,QAAQ,IACjB,4BAAKP,EAAIO,QAAQ,QAMD,IAAlBnD,EAAOJ,OAEP,6DAMA,yBAAKwD,UAAU,OACb,+BACE,+BACE,4BACE,qCACA,6BACA,oCACA,uCACA,uCACA,oCACA,2CACA,6BACA,yCACA,6BACA,yCACA,0CAGJ,+BACGnC,K,iCC5FN,SAASoC,EAAOC,GACnB,MAAQ,CACJC,KAAM,UACNjB,IAAKgB,GAWN,SAASE,EAAQ9B,GACpB,MAAQ,CACJ6B,KAAM,kBACNnB,KAAMV,GCRC,SAAS+B,EAAe7E,GACnC,IAAM8E,EAAQC,cACdC,cAGA,IAAMC,EAAqBC,cAErBC,EAAUL,EAAMM,WAAWC,QAMjC,OACI,6BACI,kBAAC,IAAD,CACIC,mBAAmB,EACnBH,QAASA,EACTI,WAAYN,EACZO,SAAO,EACPC,SAZQ,SAACC,GACjBZ,EAAMa,SAASf,EAAQc,IACvB1C,QAAQC,IAAI6B,EAAMM,WAAWQ,gB,iKCsEtBC,EA1EC,SAAC7F,GAAW,IAAD,EAEDC,IAAMC,SAAS,IAFd,mBAElB4F,EAFkB,KAGnB/B,GAHmB,KAGR,CAAEC,IAAKhE,EAAM+F,SAAUC,IAAKhG,EAAMiG,YAC7CC,EAAaC,+BACjB,0BAAMC,MAAO,CAAEC,MAAO,WACpB,uBAAG7B,UAAU,+BAIX8B,EAAmBC,kBAAQ,CAC/BC,KAAMN,IAQFO,GALOzG,EAAMoB,OAGVgB,EADAjB,EAAanB,EAAMoB,OAAQpB,EAAMqB,aACXrB,EAAMwB,QAI/BkF,EAAcC,IAAEC,KAAK,CACzBC,QAASD,IACTE,UAAWC,MAKb,OAFAJ,IAAEK,OAAOC,UAAU9B,QAAQyB,KAAOF,EAGhC,kBAACQ,EAAA,EAAD,CAAKC,OAAQpD,EAAU+B,KAAMA,GAC3B,kBAACsB,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEd,kBAAC,IAAD,KACGb,EAAelF,KAAI,SAACC,EAAOT,GAAR,OAClB,kBAACiG,EAAA,EAAD,CAAQ/C,IAAKlD,EAAGwG,SAAU,CAAC/F,EAAMuC,SAASC,IAAKxC,EAAMuC,SAASD,MAC5D,kBAAC0D,EAAA,EAAD,CACEC,SAAS,OACT,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACC,EAAA,EAAD,CAAKxB,MAAO,CAAEyB,cAAe,KAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACN,EAAA,EAAKO,MAAN,KAAazG,EAAMc,KAAKC,IACxB,kBAACmF,EAAA,EAAKQ,KAAN,KACE,2BAAI1G,EAAM2G,YAAYC,OACtB,2BAAI5G,EAAMuC,SAASI,QAAQG,UAC3B,sCAAY9C,EAAMuC,SAASI,QAAQC,gBACnC,iDAAuB3C,IAAO,GAAD,OAAID,EAAMP,YAAYC,eAAgBQ,OAAO,qBAC1E,2CAAgBiF,IAAE0B,OAAOtE,EAASC,IAAKD,EAASiC,KAAKsC,WAAW3B,IAAE0B,OAAO7G,EAAMuC,SAASC,IAAKxC,EAAMuC,SAASD,MAAOS,QAAQ,GAA3H,SAIN,kBAACqD,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUpC,MAAO,CAAEqC,YAAa,KAAhD,aACA,kBAACF,EAAA,EAAD,CACEG,KAAMlH,EAAMmH,SACZC,OAAO,SACPJ,QAAQ,aAHV,iBAYhB,kBAACxB,EAAA,EAAD,CAAQ/C,IAAK,EAAGsD,SAAU,CAACxD,EAASC,IAAKD,EAASiC,KAAMY,KAAMN,IAC9D,kBAACuC,EAAA,EAAD,CAAQ1B,OAAQ,CAACpD,EAASC,IAAKD,EAASiC,KAAM8C,OAAqB,IAAb9I,EAAM+I,S,oCCpEnDC,MAdf,SAAgBhJ,GAEd,OACE,kBAAC,IAAD,CACEiJ,IAAI,IACJC,IAAI,KACJC,KAAK,KACL9F,MAAOrD,EAAM+I,KACbA,KAAM/I,EAAM+I,KACZtD,SAAU,SAAA2D,GAAW,OAAIpJ,EAAMqJ,aAAaD,EAAYR,OAAOvF,WCNtD,SAASiG,EAAStJ,GAAQ,IAQnCuJ,EA8CAC,EAtDkC,EAEhBtJ,mBAASF,EAAMqB,aAFC,mBAE/BoI,EAF+B,KAE1BC,EAF0B,OAGZxJ,mBAASF,EAAMwB,OAHH,mBAG/BA,EAH+B,KAGxBmI,EAHwB,OAIdzJ,mBAAS,GAJK,mBAI/B6I,EAJ+B,KAIzBa,EAJyB,OAKd1J,oBAAS,GALK,mBAK/B2J,EAL+B,KAKzBC,EALyB,KAsBhCC,EAAc,WAClB/J,EAAMgK,YAAYP,EAAKjI,EAAOuH,GAC9Be,GAAQ,IAqCV,OALEN,EADY,IAAVhI,EACK,QAEAA,EAIP,6BACE,kBAAC+G,EAAA,EAAD,CAAQnC,MAAO,CAAE6D,OAAQ,IAAMzB,QAAQ,UAAU0B,QA9B7B,WACtBJ,GAAQ,KA6BN,WAIA,kBAACK,EAAA,EAAD,CAAOC,KAAMP,EAAMQ,QAASN,GAC1B,kBAACI,EAAA,EAAMG,OAAP,KACE,kBAACH,EAAA,EAAMlC,MAAP,iBAGF,kBAACkC,EAAA,EAAMxC,KAAP,KACE,yBAAKnD,UAAU,OACb,oCAAS,2BAAO+F,GAAG,UAAUC,YAAahB,EAAM/D,SAhEzC,SAACgF,IAChBlB,EAAYkB,EAAE7B,OAAOvF,OAEPrC,OAAS,GAAK2I,EAASJ,GACjCA,EAAUvI,OAAS,GAAK2I,EAAS,OA6D7B,oCAAS,2BAAOY,GAAG,YAAY5F,KAAK,OAAOtB,MAAOoG,EAAKhE,SAzD/C,SAACjE,GACjBkI,EAAOlI,EAAMoH,OAAOvF,WAyDZ,kBAAC,EAAD,CAAQgG,aAvCG,SAAC7H,GACpBoI,EAAQpI,IAsCoCuH,KAAMA,MAI9C,kBAACoB,EAAA,EAAMO,OAAP,KAEE,kBAACnC,EAAA,EAAD,CAAQC,QAAQ,SAAS0B,QAtCnB,WAEZR,EAAOiB,KACPhB,EAAS,GACTiB,SAASC,eAAe,WAAWxH,MAAQ,GAC3CuH,SAASC,eAAe,aAAaxH,MAAQ,GAC7CuG,EAAQ,KAgCF,SAEA,kBAACrB,EAAA,EAAD,CAAQC,QAAQ,YAAY0B,QAzDf,WACnBU,SAASC,eAAe,WAAWxH,MAAQ,GAC3CuH,SAASC,eAAe,aAAaxH,MAAQ,GAC7CyG,GAAQ,KAsDF,UACA,kBAACvB,EAAA,EAAD,CAAQC,QAAQ,UAAU0B,QAASH,GAAnC,aC1FK,SAAee,EAA9B,sC,4CAAe,WAAwBC,EAAKC,EAAKjC,GAAlC,eAAAkC,EAAA,yDAEX7J,EAAO,QAEEE,IAATyJ,QAA+BzJ,IAAT0J,EAJX,gCAMDE,MAAM,+BAAiCH,EAAO,MAAQC,EAAO,MAAQjC,GAC5EoC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,+BAGnBJ,MAAK,SAAAK,GACLpK,EAASqK,KAAKC,MAAMF,MAEpBG,OAAM,SAAAC,GAAK,OAAI5I,QAAQ4I,MAAMA,MAjBrB,gCAmBRxK,GAnBQ,4C,sBCSA,SAASyK,IACtB,IAAM/G,EAAQC,cACdC,cAFiC,MAIL/E,IAAMC,SAAS,IAJV,mBAI1BkB,EAJ0B,KAIlB0K,EAJkB,OAKK7L,IAAMC,SAAS,GALpB,mBAK1BmB,EAL0B,KAKb0K,EALa,OAMP9L,IAAMC,SAAS,GANR,mBAM1BsB,EAN0B,KAMnBmI,EANmB,OAOH1J,IAAMC,SAAS,WAPZ,mBAO1BI,EAP0B,KAOjB0L,EAPiB,OAQL9L,oBAAS,GARJ,mBAQ1BK,EAR0B,KAQlB0L,EARkB,OASX/L,qBATW,mBAS1B8D,EAT0B,KASrBkI,EATqB,OAUXhM,qBAVW,mBAU1B4D,EAV0B,KAUrBqI,EAVqB,OAWTjM,mBAAS,GAXA,mBAW1B6I,EAX0B,KAWpBa,EAXoB,cAsBlBwC,EAtBkB,kFAsBjC,WAAyBrB,EAAMC,EAAMjC,GAArC,eAAAkC,EAAA,6DACMO,EAAMa,EAAMtB,EAAKC,EAAKjC,GAD5B,KAEE+C,EAFF,SAEmBN,EAFnB,kCAGiB,KAAXpK,IACJ4K,EAAW,IACXC,GAAU,IALZ,4CAtBiC,sBAgBjCK,qBAAU,WAERC,MACC,CAACzI,EAAKE,IAcT,IAAMuI,EAAQ,WACZC,UAAUC,YAAYC,oBAAmB,SAAUnF,GACjD2E,EAAO3E,EAASoF,OAAO5G,UACvBoG,EAAO5E,EAASoF,OAAO1G,WACvBnB,EAAMa,SChDL,SAAyB3B,EAAKgH,GACjC,MAAQ,CACJrG,KAAM,oBACNZ,SAAU,CAACgC,SAAU/B,EAAKiC,UAAW+E,ID6CxB4B,CAAgBrF,EAASoF,OAAO5G,SAAUwB,EAASoF,OAAO1G,eAG3E,IAAI8E,EAAO/G,EACPgH,EAAOlH,EAEP+I,EAAQrN,IACZuM,EAAec,GAEfT,EAAUrB,EAAMC,EAAMjC,IAuBxB,MAAgB,YAAZzI,GAA0BC,EAU1B,yBAAKiE,UAAU,OACb,kBAAC8E,EAAD,CAAUU,YA/BE,SAAC8C,EAAOC,EAASC,IACjCA,EAAQC,SAASD,QAEF1L,IAAXwL,GACFf,EAAee,QAEFxL,IAAXyL,GACFpD,EAASoD,GAEPhE,IAASiE,KAEXpD,EAAQoD,GAERZ,EAAUpI,EAAKF,EADAkJ,GAEfhB,EAAW,aAiB2B3K,YAAaA,EAAaG,MAAOA,IACrE,kBAAC,EAAD,CAASuE,SAAU/B,EAAKiC,UAAWnC,EAAK1C,OAAQA,EAAQI,MAAOA,EAAOuH,KAAMA,EAAM1H,YAAaA,IAC/F,kBAACwD,EAAD,CAAgBzD,OAAQA,IAH1B,QAIQ2H,EAJR,KAKE,kBAAChJ,EAAD,CAASO,QAASA,EAASC,OAAQA,IACnC,kBAAC,EAAD,CAAMa,OAAQA,EAAQI,MAAOA,EAAOH,YAAaA,KAdnD,yBAAKmD,UAAU,OACb,oCACA,kBAACzE,EAAD,CAASO,QAASA,EAASC,OAAQA,K,uBE5D5B2M,GAnBA,WAEP,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAO9E,QAAQ,QACnD,kBAAC2E,EAAA,EAAOI,MAAR,CAAc7E,KAAK,UAAnB,gBACA,kBAACyE,EAAA,EAAOK,OAAR,CAAeC,gBAAc,0BAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBnD,GAAG,yBAChB,kBAACoD,GAAA,EAAD,CAAKnJ,UAAU,e,6BCNpB,SAASoJ,KAEpB,IACIC,EADa,CAAC,MAAO,MAAO,QAAS,QACTtM,KAAI,SAACuM,EAAY/M,GAE7C,IAAIuB,EAAOwL,EACPC,EAAc,cAAchN,EAAE,GAC9BiN,EAAQ,UAAUjN,EAAE,GACpBoD,EAAU,YAAYpD,EAAE,GACxBkN,EAAiB,KAALlN,EAAE,GAAO,KAEzB,OACE,kBAAC2G,EAAA,EAAD,CAAMzD,IAAKlD,EAAGqF,MAAO,CAAE8H,UAAU,IAAMZ,GAAG,SACxC,kBAAC5F,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAKxB,MAAO,CAAEyB,cAAc,KACxB,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAKO,MAAN,KAAa3F,GACb,kBAACoF,EAAA,EAAKQ,KAAN,KAAY6F,EAAY,6BAAMC,EAAM,6BAAM7J,KAGlD,kBAACyD,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,GAAIkG,GACb,kBAACnG,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUpC,MAAO,CAAEqC,YAAY,KAA/C,aACA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,aAAhB,cAQpB,OACI,6BACI,kBAACd,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAKxB,MAAO,CAAEyB,cAAc,KACxB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACjB,kBAACN,EAAA,EAAKO,MAAN,yBACA,kBAACP,EAAA,EAAKQ,KAAN,wBACgB,6BADhB,kBACoC,6BADpC,iCAKJ,kBAACN,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,GAAT,SACA,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUpC,MAAO,CAAEqC,YAAY,KAA/C,aACA,kBAACF,EAAA,EAAD,CAAQC,QAAQ,aAAhB,WAKfqF,GCrDb,IAQeM,GARI,WACf,OACI,kBAACC,GAAA,EAAD,KACI,kBAACR,GAAD,QCLG,SAASS,KACpB,IAAMvJ,EAAQC,cAcd,OAbAC,cACAhC,QAAQC,IAAI,uBACZD,QAAQC,IAAI6B,EAAMM,YAGlBN,EAAMa,SAAS,CAAChB,KAAM,UAAWjB,IAAK,cAEtCV,QAAQC,IAAIwB,EAAO,cACnBK,EAAMa,SAASlB,EAAO,cACtBK,EAAMa,SXLE,CACJhB,KAAM,aACNjB,IWGqB,eACzBV,QAAQC,IAAI,WAAY6B,EAAMM,YAC9BN,EAAMa,SAASf,EAAQ,CAAC,UAAW,UAAW,aAC9C5B,QAAQC,IAAI6B,EAAMM,WAAWQ,YAEzB,aCPR,IAmBe0I,GAnBE,WACb,OACI,kBAACC,GAAA,EAAD,CAAMC,iBAAiB,MAAMjE,GAAG,4BAC5B,kBAACkE,GAAA,EAAD,CAAKC,SAAS,MAAMC,MAAM,OACtB,kBAAC9C,EAAD,OAEJ,kBAAC4C,GAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,QACvB,kBAAC,GAAD,OAIJ,kBAACF,GAAA,EAAD,CAAKC,SAAS,QAAQC,MAAM,SACxB,kBAACN,GAAD,S,uBCTD,SAASO,KAOtB,OACE,6BACE,kBAAC,KAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,KAAD,QChBYC,QACW,cAA7BC,OAAO/K,SAASgL,UAEe,UAA7BD,OAAO/K,SAASgL,UAEhBD,OAAO/K,SAASgL,SAASC,MACvB,2D,uBCTFC,GAAe,CACfC,MAAO,EACPtJ,WAAY,GACZP,QCRe,CACX,CAAEhC,MAAO,WAAY8L,MAAO,YAC5B,CAAE9L,MAAO,SAAU8L,MAAO,UAC1B,CAAE9L,MAAO,UAAW8L,MAAO,YDM/B1I,eAAgB,GAChB2I,UAAW,GACXC,aAAc,GACdC,aAAc,GACdxN,QAAStC,IACT+P,gBAAiB,CACbC,YAAY,EACZC,WAAW,EACXC,gBAAgB,IAgDTC,OA5Cf,WAAoD,IAA/BC,EAA8B,uDAAtBX,GAAcY,EAAQ,uCAE/C,OADA7M,QAAQC,IAAI2M,GACJC,EAAOlL,MACX,IAAK,UAGD,OAAOmL,OAAOC,OAAO,GAAIH,EACrB,CAAEhK,WAAW,GAAD,oBAAMgK,EAAMhK,YAAZ,CAAwBiK,EAAOnM,QAEnD,IAAK,aAED,IAAIsM,EAAUJ,EAAMhK,WAAWqK,QAAO,SAAAvM,GAAG,OAAIA,GAAOmM,EAAOnM,OAC3D,OAAOoM,OAAOC,OAAO,GAAIH,EACrB,CAAEhK,WAAY,CAACoK,KAEvB,IAAK,kBACD,OAAOF,OAAOC,OAAO,GAAIH,EACrB,CAAEhK,WAAYiK,EAAOrM,OAG7B,IAAK,eACD,OAAOsM,OAAOC,OAAO,GAAIH,EACrB,CAAE9N,QAAS+N,EAAOK,OAG1B,IAAK,oBACD,OAAOJ,OAAOC,OAAO,GAAIH,EACrB,CAAEP,aAAcQ,EAAO9L,WAG/B,IAAK,iBACD,OAAO+L,OAAOC,OAAO,GAAIH,EACrB,CAAER,UAAWS,EAAOzO,SAE5B,QACI,OAAO6N,KElDbnK,I,OAAQqL,aAAYC,KAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUxL,MAAOA,IACf,kBAAC,GAAD,OAEF8F,SAASC,eAAe,SHmHpB,kBAAmB2B,WACrBA,UAAU+D,cAAcC,MACrBrF,MAAK,SAAAsF,GACJA,EAAaC,gBAEd/E,OAAM,SAAAC,GACL5I,QAAQ4I,MAAMA,EAAM+E,a","file":"static/js/main.824d6335.chunk.js","sourcesContent":["export default function GetToday() {\r\n\r\n    // Otetaan päivämäärästä ISOString muoto jotta saadaan datepickeriin päivämäärä näkyviin\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + 0);\r\n    let isoDate = date.toISOString().substr(0, 10);\r\n\r\n\r\n\r\n\r\n    return isoDate\r\n\r\n\r\n\r\n}","import React from 'react'\r\n\r\n\r\nexport default function Loading(props) {\r\n\r\n    //const [point, setPoint] = React.useState('')\r\n    const [times, setTimes] = React.useState(0)\r\n    //    const [point, setPoint] = React.useState('')\r\n    // Latauksen aikana Loading sanan perään tulee pisteitä sekunnin tahtiin. \r\n    let load = props.loading;\r\n\r\n    //Mikäli tämä on ensimmäinen lataus niin lähtee pisteet rullailemaan.\r\n    if (load === 'LOADING' && !props.loaded) {\r\n        setTimeout(() => {\r\n            setTimes(times + 1)\r\n        }\r\n            , 1000)\r\n    }\r\n\r\n    // Oletuksena on että mikäli 30 sekunttiin ei listaa ole tullut ruutuun niin meille heitetään \r\n    // 'jokin meni vikaan' teksti.\r\n    if (times < 30) {\r\n        return (\r\n            <div>\r\n                {load}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                Something isn't right :(\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","\r\nexport default function Sorting(filtered) {\r\n\r\n    //Tässä on Bubblesorttaus... \r\n    const changeArrays = (filtered, x, y) => {\r\n        let temp = filtered[x];\r\n        filtered[x] = filtered[y];\r\n        filtered[y] = temp;\r\n    };\r\n\r\n    for (let i = 0; i < filtered.length - 1; i++) {\r\n        for (let x = 0; x < filtered.length - i - 1; x++) {\r\n            if (filtered[x].event_dates.starting_day > filtered[x + 1].event_dates.starting_day) {\r\n                changeArrays(filtered, x, x + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    return filtered\r\n\r\n}","import moment from 'moment'\r\nimport Sort from './Sort'\r\n\r\nexport default function SearchByDate(events, selectedDay) {\r\n\r\n  // Funktioon tuodaan kaikki eventit mitkä paketissa on, mikäli tämä on ainut/ensimmäinen filtteri, niin events on se iso lista\r\n  // tuodaan päivämäärä jota haetaan\r\n\r\n  //luodaan uusi taulukkomuuttuja\r\n  let filtered = [];\r\n  if (selectedDay !== 0 && events !== undefined) {\r\n\r\n    //käydään lista läpi ja tarkastellaan onko tapahtumalla ja toivotulla päivämäärällä samatieto.\r\n    events.map((event) => {\r\n\r\n      //tässä olisi voitu olla käyttämättä momenttia, mutta käytin sen takia että pysyy ajatus kasassa... isostring sekoitti ajatusta\r\n      if (moment(event.event_dates.starting_day).format(\"DD.MM.YYYY\") === moment(selectedDay).format(\"DD.MM.YYYY\")) {\r\n\r\n        let date = new Date();\r\n        date.setDate(date.getDate() + 0);\r\n        let isoDate = date.toISOString().substr(0, 10);\r\n\r\n        //Mikäli etsitään eripäivän tapahtumia niin näytetään kaikki.\r\n        if (isoDate === selectedDay) {\r\n\r\n          let startTime = new Date(event.event_dates.starting_day)\r\n          let endTime = new Date(event.event_dates.ending_day)\r\n          let dateNow = new Date()\r\n          let timeNow = dateNow.getTime()\r\n          let diffStar = new Date()\r\n          diffStar = startTime - timeNow\r\n          diffStar = diffStar / 1000 / 60 / 60\r\n\r\n          let diffEnd = new Date()\r\n          diffEnd = endTime - timeNow\r\n          diffEnd = diffEnd / 1000 / 60 / 60\r\n          // diffStar sekä diffEnd numerot ovat tunteja\r\n          if (diffStar > 0 && diffStar < 3 || diffStar < 0 && diffEnd > 0) {\r\n            filtered.push(event)\r\n          }\r\n        } else {\r\n          filtered.push(event)\r\n        }\r\n      }\r\n    }\r\n    )\r\n    //filtteröidyt tapahtumat laitetaan vielä sorttausmyllyn läpi\r\n    filtered = Sort(filtered)\r\n\r\n    return filtered\r\n  }\r\n  /// Mikäli päivämäärä on 0 niin funktio pomppaa suoraan tänne ja näyttää \r\n  //kaikki alueelta päivämäärästä riippumatta\r\n  return events\r\n}\r\n","import Sort from './Sort'\r\n\r\nexport default function SearchByEvent(events, event) {\r\n\r\n\r\n  // Funktioon tuodaan kaikki eventit mitkä paketissa on, mikäli tämä on ainut/ensimmäinen filtteri, niin events on se iso lista\r\n  // tuodaan myös event joka on haettu tapahtumanimi\r\n  let letEvents = events;\r\n  //luodaan uusi taulukkomuuttuja\r\n  let filtered = [];\r\n  if (event !== 0) {\r\n    //käydään lista läpi ja tarkastellaan onko tapahtumalla suomalaista nimeä, jos ei niin tarkastetaan onko \r\n    //englantilaista nimeä ja siitä sitten ruotsin kielistä nimeä.\r\n    letEvents = events.map((events, i) => {\r\n\r\n      let name = events.name.fi;\r\n\r\n      if (name === null) {\r\n        name = events.name.en\r\n      }\r\n\r\n      if (name === null) {\r\n        name = events.name.sv\r\n      }\r\n\r\n      //tapahtuman nimi sekä hakukentässä oleva teksti laitetaan pieneksi jolloin tarkastelu on paljon helpompaa\r\n      name = name.toLowerCase();\r\n      event = event.toLowerCase();\r\n      //mikäli nimi sisältää hakusanan niin tapahtuma lisätään uuteen taulukkomuuttaajaan\r\n      if (name.includes(event) === true) {\r\n        filtered.push(events)\r\n      }\r\n    }\r\n    )\r\n    //filtteröidyt tapahtumat laitetaan vielä sorttausmyllyn läpi\r\n    filtered = Sort(filtered)\r\n    return filtered\r\n  }\r\n  /// Mikäli eventtitietoa ei olla rassattu niin funktio pomppaa tänne suoraan\r\n  return letEvents\r\n}\r\n\r\n","import Sort from './Sort'\r\nimport SelectedTags from './SelectedTags'\r\n\r\n\r\n// an event has an array of tags in event.tags\r\n\r\n//TODO: SearchByTag(events, selectedTags): get selectedTags array as prop instead of hard coded\r\nexport default function SearchByTag(events) {\r\n    //console.log('SearchByTags')\r\n    //console.log(events)\r\n\r\n    let filtered = [];\r\n    let selectedTags = SelectedTags()\r\n    //console.log(\"tags in SearByTag\")\r\n    //console.log(selectedTags)\r\n    let selectedArray = []\r\n    //console.log(selectedTags)\r\n    selectedTags.forEach(element => console.log(element))\r\n    selectedTags.forEach(element => console.log(element.value))\r\n    //console.log(selectedTags)\r\n    // if no tags are selected, return unaltered list\r\n    if (Array.isArray(selectedTags) && selectedTags.length === 0) {\r\n        return events\r\n    }\r\n\r\n    // for each event, if a selected tag is among the event tags, the event passes\r\n    events.forEach(event => {\r\n        if (includesTag(event)) {\r\n            filtered.push(event)\r\n        }\r\n    })\r\n\r\n    // checks if an event tag is among selectedtags. Returns true if it does include \r\n    function includesTag(event) {\r\n        let includes = false\r\n        if (event.tags.some(tag => {\r\n            return selectedTags.includes(tag.name)\r\n        })) {\r\n            includes = true\r\n        }\r\n        return includes\r\n\r\n    }\r\n\r\n    //console.log(\"Filtered list\")\r\n    //console.log(filtered)\r\n\r\n\r\n\r\n    return filtered\r\n}\r\n","import React, { createRef, useState } from 'react';\r\nimport Select from 'react-select';\r\n\r\n// This function keeps track of the tags that are selected, so that we can call this function from anywhere\r\n// to update selected tags, call with tagArray as parameter\r\n// to get tags, call without parameter\r\n\r\nexport default function SelectedTags(tagArray) {\r\n    let incomingArray = tagArray\r\n    let selected = []\r\n    if (incomingArray === undefined) {\r\n        //console.log('Tags returned')\r\n        return selected\r\n    } else {\r\n        selected = tagArray\r\n        //console.log(\"Tagged Array Changed\")\r\n        console.log(selected)\r\n    }\r\n}","import React from 'react'\r\nimport '../App.css'\r\nimport moment from 'moment'\r\nimport SearchByDate from './SearchByDate'\r\nimport SearchByEvent from './SearchByEvent'\r\nimport SearchByTag from './SearchByTag'\r\nexport default function ShowAll(props) {\r\n\r\n\r\n  let events = props.events\r\n  let filted;\r\n  //Jos päivämäärä on valittu ->\r\n\r\n  //mennään etsimään isosta listasta kaikki tietyn päivämäärän tapahtumat SearchByDate -funktion kautta\r\n  filted = SearchByDate(props.events, props.selectedDay)\r\n  events = SearchByEvent(filted, props.event)\r\n\r\n  //Mikäli käyttäjä on nollannut hakukentän ja päivämääräkentän niin isolista laitetaan filteröidynlistan päälle\r\n  //Tämä ei toistaiseksi vaikuta mitenkään latitude/longitude muokkauksiin :/\r\n  if (props.event === 0 && props.selectedDay === 0) {\r\n    events = props.event\r\n  }\r\n\r\n  // Tag filter\r\n  events = SearchByTag(events)\r\n\r\n  // letEventsista tulee lista jota aiemmin mahdollisesti jo filteröitiin ja sortattiin\r\n  let letEvents = \"\";\r\n  letEvents = events.map((events, i) => {\r\n\r\n    let name = events.name.fi;\r\n    let endingday = events.event_dates.ending_day;\r\n    let lon = events.location.lon;\r\n    let lat = events.location.lat;\r\n\r\n    if (name === null) {\r\n      name = events.name.en\r\n    }\r\n    if (name === null) {\r\n      name = events.name.sv\r\n    }\r\n    \r\n    let startTime = new Date(events.event_dates.starting_day)\r\n    startTime =  moment(startTime).format(\"HH:mm\");\r\n    let endTime = new Date(endingday)\r\n    endTime =  moment(endTime).format(\"HH:mm\");\r\n    \r\n    // Tässä määritellään mitä näytetään käyttäjälle\r\n    return (\r\n      <tr key={i} >\r\n        <td>{i}</td>\r\n        <td></td>\r\n        <td width={500}>{name}</td>\r\n        <td>{events.location.address.street_address} </td>\r\n        <td>{events.location.address.postal_code} </td>\r\n        <td>{events.location.address.locality} </td>\r\n        <td>{moment(events.event_dates.starting_day).format(\"DD.MM.YYYY\")} {startTime}</td>\r\n        <td> </td>\r\n        <td>{moment(endingday).format(\"DD.MM.YYYY\")} {endTime} </td>\r\n        <td> </td>\r\n        <td>{lon.toFixed(7)}</td>\r\n        <td>{lat.toFixed(7)}</td>\r\n      </tr>\r\n    )\r\n\r\n  })\r\n\r\n  if (events.length === 0) {\r\n    return (\r\n      <div>\r\n        Sorry, no events were found.\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className=\"App\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>index</th>\r\n              <th></th>\r\n              <th>name</th>\r\n              <th>address</th>\r\n              <th>zipcode</th>\r\n              <th>city</th>\r\n              <th>startingday</th>\r\n              <th></th>\r\n              <th>endingday</th>\r\n              <th></th>\r\n              <th>longitude</th>\r\n              <th>latitude</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {letEvents}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}","\r\n// param is string\r\nexport function addTag(newTag) {\r\n    return ({\r\n        type: 'ADD_TAG',\r\n        tag: newTag\r\n    })\r\n}\r\n// param is string\r\nexport function removeTag(targetTag) {\r\n    return ({\r\n        type: 'REMOVE_TAG',\r\n        tag: targetTag\r\n    })\r\n}\r\n// param is array of all selected tags\r\nexport function setTags(tagArray) {\r\n    return ({\r\n        type: 'SET_CHOSEN_TAGS',\r\n        tags: tagArray\r\n    })\r\n}","import React, { createRef, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport GetTagList from './GetTagList';\r\nimport SelectedTags from './SelectedTags'\r\nimport SearchByTag from './SearchByTag'\r\nimport {useStore, useDispatch, connect} from 'react-redux'\r\nimport {setTags} from '../actions/tagActions'\r\n\r\n// {value:'Teatteri', label: 'Teatteri'}\r\n\r\nexport default function ShowTagOptions(props) {\r\n    const store = useStore()\r\n    connect()\r\n\r\n    \r\n    const animatedComponents = makeAnimated();\r\n    // Muutos array[string] => array{value: string, label: string}\r\n    const options = store.getState().allTags;\r\n    const tagSelected = (arrayOfSelectedTags) => {\r\n        store.dispatch(setTags(arrayOfSelectedTags))\r\n        console.log(store.getState().chosenTags)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                closeMenuOnSelect={false}\r\n                options={options}\r\n                components={animatedComponents}\r\n                isMulti\r\n                onChange={tagSelected}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Map, TileLayer, Marker, Popup, Circle } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css'\r\nimport L from 'leaflet'\r\nimport icon from 'leaflet/dist/images/marker-icon.png'\r\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png'\r\nimport MarkerClusterGroup from 'react-leaflet-markercluster'\r\nimport { renderToStaticMarkup } from 'react-dom/server'\r\nimport { divIcon } from 'leaflet'\r\nimport SearchByDate from './SearchByDate'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport moment from 'moment'\r\nimport SearchByEvent from './SearchByEvent'\r\n\r\nconst MapView = (props) => {\r\n\r\n  const [zoom, setZoom] = React.useState(15)\r\n  const location = { lat: props.latitude, lng: props.longitude }\r\n  const iconMarkup = renderToStaticMarkup(\r\n    <span style={{ color: 'Tomato' }}>\r\n      <i className='fas fa-street-view fa-3x' />\r\n    </span>\r\n  )\r\n\r\n  const customMarkerIcon = divIcon({\r\n    html: iconMarkup,\r\n  })\r\n  \r\n  let events = props.events\r\n  let filted;\r\n  filted = SearchByDate(props.events, props.selectedDay)\r\n  events = SearchByEvent(filted, props.event)\r\n\r\n  const filteredEvents = events\r\n\r\n  const DefaultIcon = L.icon({\r\n    iconUrl: icon,\r\n    shadowUrl: iconShadow\r\n  })\r\n\r\n  L.Marker.prototype.options.icon = DefaultIcon\r\n\r\n  return (\r\n    <Map center={location} zoom={zoom}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n      />\r\n      <MarkerClusterGroup>\r\n        {filteredEvents.map((event, i) => (\r\n          <Marker key={i} position={[event.location.lat, event.location.lon]}>\r\n            <Popup\r\n              minWidth=\"500\">\r\n              <Card>\r\n                <Card.Body>\r\n                  <Row style={{ paddingBottom: 20 }}>\r\n                    <Col xs={12} md={6}>\r\n                      <Card.Title>{event.name.fi}</Card.Title>\r\n                      <Card.Text>\r\n                        <p>{event.description.intro}</p>\r\n                        <p>{event.location.address.locality}</p>\r\n                        <p>Osoite: {event.location.address.street_address}</p>\r\n                        <p>Pvm ja aloitusaika {moment(`${event.event_dates.starting_day}`).format(\"DD.MM.YYYY HH:mm\")}</p>\r\n                        <p>Etäisyys: { (L.latLng(location.lat, location.lng).distanceTo(L.latLng(event.location.lat, event.location.lon))).toFixed(0) } m</p>\r\n                      </Card.Text>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col xs={6}>\r\n                      <Button variant=\"primary\" style={{ marginRight: 10 }}>Show more</Button>\r\n                      <Button\r\n                        href={event.info_url}\r\n                        target=\"_blank\"\r\n                        variant=\"secondary\">WWW</Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            </Popup>\r\n          </Marker>\r\n        ))}\r\n      </MarkerClusterGroup>\r\n      <Marker key={1} position={[location.lat, location.lng]} icon={customMarkerIcon} ></Marker>\r\n      <Circle center={[location.lat, location.lng]} radius={props.area * 1000} />\r\n    </Map >\r\n  );\r\n}\r\n\r\nexport default MapView;","import React from 'react'\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css'\r\nimport RangeSlider from 'react-bootstrap-range-slider'\r\n\r\nfunction Slider(props) {\r\n\r\n  return (\r\n    <RangeSlider\r\n      min='1'\r\n      max='20'\r\n      size='lg'\r\n      value={props.area}\r\n      area={props.area}\r\n      onChange={changeEvent => props.HandleSlider(changeEvent.target.value)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Slider","import React, { useState } from 'react'\r\n\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport Slider from './Slider'\r\nimport ToDay from './GetToday'\r\n\r\n\r\nexport default function Filtteri(props) {\r\n\r\n  const [day, setDay] = useState(props.selectedDay)\r\n  const [event, setEvent] = useState(props.event)\r\n  const [area, setArea] = useState(1)\r\n  const [open, setOpen] = useState(false);\r\n\r\n\r\n  let happening;\r\n\r\n  const SeekName = (e) => {\r\n    happening = e.target.value\r\n\r\n    if (happening.length > 2) { setEvent(happening) }\r\n    if (happening.length < 1) { setEvent(0) }\r\n\r\n  }\r\n\r\n  const ChangeDay = (event) => {\r\n    setDay(event.target.value)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    props.ShowFilters(day, event, area);\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    document.getElementById(\"eventos\").value = \"\"\r\n    document.getElementById(\"selectday\").value = \"\"\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  }\r\n\r\n  const HandleSlider = (event) => {\r\n    setArea(event)\r\n    /* fetchData(lat, lon, event)\r\n    setLoading('LOADING') */\r\n    //console.log(event)\r\n  }\r\n\r\n  const Reset = () => {\r\n\r\n    setDay(ToDay())\r\n    setEvent(0)\r\n    document.getElementById(\"eventos\").value = \"\"\r\n    document.getElementById(\"selectday\").value = \"\"\r\n    setArea(1)\r\n  }\r\n\r\n\r\n  let text;\r\n  if (event === 0) {\r\n    text = 'event'\r\n  } else {\r\n    text = event\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button style={{ margin: 10 }} variant=\"primary\" onClick={handleClickOpen}>\r\n        Filters\r\n  </Button>\r\n\r\n      <Modal show={open} onClose={handleClose} >\r\n        <Modal.Header>\r\n          <Modal.Title>Filters</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <div className=\"App\">\r\n            <p>name: <input id=\"eventos\" placeholder={text} onChange={SeekName} /></p>\r\n            <p>date: <input id=\"selectday\" type=\"date\" value={day} onChange={ChangeDay} /></p>\r\n            <Slider HandleSlider={HandleSlider} area={area} />\r\n          </div>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n\r\n          <Button variant=\"danger\" onClick={Reset}>Reset</Button>\r\n\r\n          <Button variant=\"secondary\" onClick={handleCancel}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>Search</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}","\r\n\r\nexport default async function Fetching(lati,long,area){\r\n\r\nlet events=[];\r\n\r\nif (lati !== undefined && long !== undefined) {\r\n    //   let data = await fetch('v1/events/?distance_filter=' + lati + '%2C' + long + '%2C' + area, {\r\n        await fetch('api/events/?distance_filter=' + lati + '%2C' + long + '%2C' + area)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Something went wrong ...');\r\n        }\r\n      })\r\n      .then(data => {\r\n       events = JSON.parse(data)\r\n      })\r\n      .catch(error => console.error(error)); \r\n  } \r\nreturn events\r\n\r\n}","import React, { useEffect, useState } from 'react'\r\nimport GetToday from './GetToday'\r\nimport Loading from './Loading'\r\nimport Show from './Show'\r\nimport ShowTagOptions from './ShowTagOptions'\r\nimport MapView from './MapView'\r\nimport Filtteri from './Filter'\r\nimport Fetch from './Fetch'\r\nimport {useStore, useDispatch, connect} from 'react-redux'\r\nimport {setUserLocation} from '../actions/locationActions'\r\n\r\nexport default function ListView() {\r\n  const store = useStore()\r\n  connect()\r\n\r\n  const [events, setEvents] = React.useState('')\r\n  const [selectedDay, setSelectedDay] = React.useState(0)\r\n  const [event, setEvent] = React.useState(0)\r\n  const [loading, setLoading] = React.useState('LOADING')\r\n  const [loaded, setLoaded] = useState(false)\r\n  const [lat, setLat] = useState()\r\n  const [lon, setLon] = useState()\r\n  const [area, setArea] = useState(1)\r\n\r\n  \r\n\r\n  // Sivun alkuu käytetään useEffectiä jossa ladataan lista kun sivu aukeaa\r\n  useEffect(() => {\r\n    //Haetaan koordinaatit\r\n    Coords();\r\n  }, [lon, lat])\r\n\r\n\r\n  async function fetchData(lati, long, area) {\r\n    let data=(Fetch(lati,long,area))\r\n    setEvents((await data))\r\n    if (events !== ''){\r\n    setLoading('')\r\n    setLoaded(true)\r\n    //console.log('events:',await data)\r\n    }\r\n    \r\n  }\r\n\r\n  const Coords =() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      setLat(position.coords.latitude)\r\n      setLon(position.coords.longitude)\r\n      store.dispatch(setUserLocation(position.coords.latitude, position.coords.longitude))\r\n      \r\n    });\r\n    let lati = lat\r\n    let long = lon\r\n    //Haetaan funktion kautta päivämäärä joka muutetaan isomuotoon.\r\n    let toDay = GetToday()\r\n    setSelectedDay(toDay)\r\n    //Haetaan API\r\n    fetchData(lati, long, area);\r\n  }\r\n  \r\n  const ShowFilters=(dayNew,eventNew,areaNew)=>{\r\n    areaNew=parseInt(areaNew)\r\n    //console.log(eventNew)\r\n    if (dayNew !== undefined) {\r\n      setSelectedDay(dayNew)\r\n    }\r\n    if (eventNew!==undefined) {\r\n      setEvent(eventNew)\r\n    }\r\n    if (area !== areaNew){\r\n      //console.log(area,areaNew)\r\n      setArea(areaNew)\r\n      const alueNew= areaNew\r\n      fetchData(lat, lon,alueNew)\r\n      setLoading('LOADING')\r\n    }\r\n    \r\n  }\r\n \r\n  // Niin kauan kuin loading state on 'LOADING' niin näytetään pelkästään lataus 'merkkiä'\r\n  if (loading === 'LOADING' && !loaded) {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> </h1>\r\n        <Loading loading={loading} loaded={loaded} />\r\n      </div>\r\n    )\r\n  } else {\r\n    // API Rest on ladattu kokonaan ja näytetään koko lista.\r\n    return (\r\n      <div className=\"App\">\r\n        <Filtteri ShowFilters={ShowFilters} selectedDay={selectedDay} event={event}/>\r\n        <MapView latitude={lat} longitude={lon} events={events} event={event} area={area} selectedDay={selectedDay} ></MapView> \r\n        <ShowTagOptions events={events} />\r\n        area:{area}km\r\n        <Loading loading={loading} loaded={loaded} />\r\n        <Show events={events} event={event} selectedDay={selectedDay} />\r\n      </div>\r\n    )\r\n\r\n  }\r\n}","export function setUserLocation(lat, long) {\r\n    return ({\r\n        type: 'SET_USER_LOCATION',\r\n        location: {latitude: lat, longitude: long}\r\n    })\r\n}","import React from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n        return (\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"/Index\">WalkInEvents</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        {/*<Nav.Link href=\"/Map\">Map</Nav.Link>\r\n                    <Nav.Link href=\"/List\">List</Nav.Link>*/}\r\n                        {/* <Nav.Link >Filter</Nav.Link> */}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n  \r\n\r\n}\r\n\r\nexport default NavBar;","import React from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nexport default function EventCard() {\r\n\r\n    let mockEvents = ['One', 'Two', 'Three', 'Four']\r\n    let cardMockEvents = mockEvents.map((mockEvents, i) => {\r\n\r\n        let name = mockEvents;\r\n        let dateAndTime = 'date&time '+(i+1);\r\n        let place = 'place '+(i+1);\r\n        let address = 'address '+(i+1);\r\n        let distance = (i+1)*100+' m';\r\n        \r\n        return (\r\n          <Card key={i} style={{ marginTop:10 }} bg='light'>\r\n            <Card.Body>\r\n                <Row style={{ paddingBottom:20 }}>\r\n                    <Col>\r\n                        <Card.Title>{name}</Card.Title>\r\n                        <Card.Text>{dateAndTime}<br/>{place}<br/>{address}</Card.Text>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={6}>{distance}</Col>\r\n                    <Col xs={6}>\r\n                        <Button variant=\"primary\" style={{ marginRight:10 }}>Show more</Button>\r\n                        <Button variant=\"secondary\">WWW</Button>\r\n                    </Col> \r\n                </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Row style={{ paddingBottom:20 }}>\r\n                        <Col xs={12} md={6}>\r\n                        <Card.Title>John Bishop Live</Card.Title>\r\n                        <Card.Text>\r\n                        20.10.2020 19:30<br/>Hall of Culture<br/>Sturenkatu 4 00510 Helsinki\r\n                        </Card.Text>\r\n                        </Col>\r\n                    </Row>   \r\n                    <Row>\r\n                        <Col xs={6}>300 m</Col>\r\n                        <Col xs={6}>\r\n                            <Button variant=\"primary\" style={{ marginRight:10 }}>Show more</Button>\r\n                            <Button variant=\"secondary\">WWW</Button>\r\n                        </Col> \r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n            {cardMockEvents}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\n//import Row from 'react-bootstrap/Row'\r\n//import Col from 'react-bootstrap/Col'\r\nimport EventCard from './EventCard'\r\n\r\nconst ListScreen = () => {\r\n    return (\r\n        <Container>\r\n            <EventCard />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ListScreen","import React, { useState, useEffect } from 'react';\r\nimport {useStore, useDispatch, connect} from 'react-redux'\r\nimport {addTag, removeTag, setTags} from '../actions/tagActions'\r\n\r\nexport default function TestScreen() {\r\n    const store = useStore()\r\n    connect()\r\n    console.log('Running redux tests')\r\n    console.log(store.getState())\r\n    //store.dispatch(firstReducer('ADD_TAG','testitagi'))\r\n    //store.dispatch(addTag('testitagi'))\r\n    store.dispatch({type: 'ADD_TAG', tag: 'uusitagi1'})\r\n    //store.dispatch(addTag('uusitagi2'))\r\n    console.log(addTag('uusitagi2'))\r\n    store.dispatch(addTag('uusitagi2'))\r\n    store.dispatch(removeTag('Testitagi1'))\r\n    console.log('state on', store.getState())\r\n    store.dispatch(setTags(['SetTag1', 'SetTag2', 'SetTag3']))\r\n    console.log(store.getState().chosenTags)\r\n    return (\r\n        \"Tests here\"\r\n    )\r\n    \r\n}","import React from 'react'\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport MapScreen from './MapScreen'\r\nimport ListScreen from './ListScreen'\r\nimport ListView from './ListView'\r\nimport TestScreen from '../tests/TestScreen'\r\n\r\n// Entinen TabNav.js komponentti uudelleennimetty MainView.js, koska tämä tulisi olemaan alkunäkymä.\r\n// Pitäisikö ListView.js komponentin toiminnallisuus siirtää tälle sivulle fiksumman\r\n// arkkitehtuurin näkökulmasta? Nyt ListView tekee oikeastaan kaiken toiminnallisuuden,\r\n// vaikka nimensä mukaan sen pitäisi vain listata tapahtumat?\r\n\r\nconst MainView = () => {\r\n    return (\r\n        <Tabs defaultActiveKey=\"map\" id=\"uncontrolled-tab-example\">\r\n            <Tab eventKey=\"map\" title=\"Map\">\r\n                <ListView />\r\n            </Tab>\r\n            <Tab eventKey=\"list\" title=\"List\">\r\n                <ListScreen />\r\n            </Tab>\r\n\r\n            {/* Kommentoidaan pois */}\r\n            <Tab eventKey=\"tests\" title=\"Tests\">\r\n                <TestScreen />\r\n            </Tab>\r\n\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default MainView","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport ListView from './components/ListView'\r\n\r\nimport NavBar from './components/NavBar'\r\nimport MainView from './components/MainView'\r\nimport MapScreen from './components/MapScreen'\r\nimport ListScreen from './components/ListScreen'\r\nimport ReduxTests from './tests/ReduxTests'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\"\r\n\r\nexport default function App() {\r\n\r\n  // Tests in console\r\n  /* useEffect(() => {\r\n    ReduxTests()\r\n  }, []) */\r\n\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <NavBar />\r\n        <MainView />\r\n        <Switch>\r\n          {/*\r\n          Esimerkki routeroinnista filteörintinäkymään\r\n          <Route path=\"/Filters\" component={Filters}>\r\n            <Filters />\r\n          </Route>\r\n          */}\r\n        </Switch>\r\n      </Router>\r\n    </div >\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport GetToday from './components/GetToday'\r\nimport GetTagList from './components/GetTagList'\r\n\r\n//rootReducer = combineReducers({})\r\n/* // Jatkossa ehkä tarvittavia kenttiä: \r\nsearchLocation, \r\n\r\n*/\r\nlet initialState = {\r\n    range: 3,\r\n    chosenTags: [],\r\n    allTags: GetTagList(),\r\n    filteredEvents: [],\r\n    allEvents: [],\r\n    userLocation: {},\r\n    selectedTime: {},\r\n    timeNow: GetToday(),\r\n    selectedFilters: {\r\n        timeFilter: true,\r\n        tagFilter: true,\r\n        locationFilter: true\r\n    }\r\n}\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    console.log(state)\r\n    switch (action.type) {\r\n        case 'ADD_TAG':\r\n            // Yhdistetään kolme objectia: tyhjä objecti, nykyinen state ja\r\n            // tagilista, jossa myös uusi tagi\r\n            return Object.assign({}, state,\r\n                { chosenTags: [...state.chosenTags, action.tag] })\r\n\r\n        case 'REMOVE_TAG':\r\n            // Create new array of tags which are not the removed tag\r\n            let newTags = state.chosenTags.filter(tag => tag != action.tag)\r\n            return Object.assign({}, state,\r\n                { chosenTags: [newTags] })\r\n\r\n        case 'SET_CHOSEN_TAGS':\r\n            return Object.assign({}, state,\r\n                { chosenTags: action.tags })\r\n\r\n        // Time\r\n        case 'SET_TIME_NOW':\r\n            return Object.assign({}, state,\r\n                { timeNow: action.time })\r\n\r\n        // Location\r\n        case 'SET_USER_LOCATION':\r\n            return Object.assign({}, state,\r\n                { userLocation: action.location })\r\n\r\n        // Events\r\n        case 'SET_ALL_EVENTS':\r\n            return Object.assign({}, state,\r\n                { allEvents: action.events })\r\n\r\n        default:\r\n            return initialState\r\n    }\r\n}\r\n\r\n\r\n/* const rootReducer = combineReducers({\r\n    firstReducer\r\n}) */\r\n\r\nexport default rootReducer","\r\n// This function is to control the tag options given to user\r\nexport default function GetTagList() {\r\n    //let tagArray = [\"Kuvataide\",\"Muotoilu\",\"Elokuvat\",\"Kuvataide\",\"Musiikki\",\"Tanssi\",\"Teatteri\"]\r\n    let tagArray = [\r\n        { value: 'Teatteri', label: 'Teatteri' },\r\n        { value: 'Tanssi', label: 'Tanssi' },\r\n        { value: 'General', label: 'General' }\r\n    ]\r\n    return tagArray\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport firstReducer from './reducers'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst store = createStore(firstReducer)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}